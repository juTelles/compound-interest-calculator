{"version":3,"sources":["components/installments/installment.js","components/installments/installments.js","components/form/form.js","App.js","index.js"],"names":["Installment","result","installment","finalValue","initialValue","difference","differencePercentage","toFixed","className","isNaN","Installments","resultsArray","id","map","key","Form","useState","setInitialValue","interestRate","setInterestRate","installments","setInstallments","currentInstallment","total","Number","calculator","setResultsArray","useEffect","arr","i","push","htmlFor","onChange","event","value","target","min","type","name","step","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAEe,SAASA,EAAT,GAAkC,IAAXC,EAAU,EAAVA,OAE5BC,EAA0CD,EAA1CC,YAAaC,EAA6BF,EAA7BE,WAAYC,EAAiBH,EAAjBG,aAE3BC,EAAaF,EAAaC,EAC1BE,GAAsC,IAAbD,EAAoBD,GAAcG,QAAQ,GAEzE,OACA,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,kCACb,8BAAON,EAAP,KADF,IAC8B,6BAC5B,mCAASC,GAFX,IAE8B,6BAC5B,mCAASE,EAAWE,QAAQ,IAH9B,IAGyC,6BACvC,8BAAOE,MAAMH,GAAwB,EAAIA,EAAzC,SCdK,SAASI,EAAT,GAAyC,IAAjBC,EAAgB,EAAhBA,aACjCC,EAAK,EACT,OACE,4BAEGD,EAAaE,KAAI,SAAAZ,GAElB,OADAW,IACO,wBAAIE,IAAKF,GACN,kBAACZ,EAAD,CAAaC,OAAQA,SCRtB,SAASc,IAEtB,IAF6B,EAQWC,mBAAS,IARpB,mBAQtBZ,EARsB,KAQRa,EARQ,OASWD,mBAAS,IATpB,mBAStBE,EATsB,KASRC,EATQ,OAUWH,mBAAS,IAVpB,mBAUtBI,EAVsB,KAURC,EAVQ,OAWWL,mBAAS,CAAC,CAChDd,YAAa,EACbE,aAAcA,EACdD,WAZiB,SAACmB,GAClB,IAAIC,EAAQ,EAEZ,OADAA,EAAQnB,EAAY,SAAK,EAAKc,EAAe,IAASI,GAC/CE,OAAOD,EAAMhB,QAAQ,IAShBkB,CAAW,MAdI,mBAWtBd,EAXsB,KAWRe,EAXQ,KAgB7BC,qBAAU,WAUR,IATA,IAAMF,EAAa,SAACH,GAClB,IAAIC,EAAQ,EAEZ,OADAA,EAAQnB,EAAY,SAAK,EAAKc,EAAe,IAASI,GAC/CE,OAAOD,EAAMhB,QAAQ,KAG1Be,EAAqB,EACrBM,EAAM,GAEDC,EAAI,EAAGA,EAAIT,EAAe,EAAGS,IACpCD,EAAIE,KAAK,CACP5B,YAAaoB,EACblB,aAAcA,EACdD,WAAYsB,EAAWH,KAEzBA,IAGFI,EAAgB,GAAD,OAAKE,MACnB,CAACxB,EAAcc,EAAcE,IAmBhC,OACE,6BACE,2BAAOW,QAAQ,gBAAf,kBAEE,2BAAOC,SArBc,SAACC,GAC1B,IAAIC,EAAQV,OAAOS,EAAME,OAAOD,OAChCA,EAAQA,GAAS,GAAKzB,MAAMyB,GAAS,GAAKA,EAC1CjB,EAAgBiB,IAkByBA,MAAO9B,EAAcgC,IAAI,IAAIC,KAAK,SAASC,KAAK,eAAe1B,GAAG,kBAEzG,2BAAOmB,QAAQ,gBAAf,iBAEE,2BAAOQ,KAAK,MAAMP,SAnBG,SAACC,GAC1B,IAAIC,EAAQV,OAAOS,EAAME,OAAOD,OAChCA,EAAkB,IAAVA,GAAezB,MAAMyB,GAAS,GAAKA,EAC3Cf,EAAgBe,IAgBoCA,MAAOhB,EAAcmB,KAAK,SAASC,KAAK,eAAe1B,GAAG,kBAE5G,2BAAOmB,QAAQ,gBAAf,gBAEE,2BAAOC,SAlBc,SAACC,GAC1B,IAAIC,EAAQV,OAAOS,EAAME,OAAOD,OAChCA,EAAQA,GAAS,GAAKzB,MAAMyB,GAAS,GAAKA,EAC1Cb,EAAgBa,IAeyBA,MAAOd,EAAcgB,IAAI,IAAIC,KAAK,SAASC,KAAK,eAAe1B,GAAG,kBAEzG,6BACE,kBAACF,EAAD,CAAcC,aAAcA,EAAcP,aAAcA,MCtEjD,SAASoC,IACtB,OAAO,kBAACzB,EAAD,MCIT0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACH,EAAD,OAEFI,SAASC,eAAe,U","file":"static/js/main.3fbf0b9f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Installment({ result }) {\r\n\r\n  const { installment, finalValue, initialValue } = result;\r\n\r\n  const difference = finalValue - initialValue;\r\n  const differencePercentage = ((difference * 100) / initialValue).toFixed(2);\r\n\r\n  return (\r\n  <div className=\"row\">\r\n    <div className=\"col s7 m7\">\r\n      <div className=\"card green\">\r\n        <div className=\"card-content white-text center\">\r\n          <span>{installment} </span> <br />\r\n          <span>R${finalValue}</span> <br />\r\n          <span>R${difference.toFixed(2)}</span> <br />\r\n          <span>{isNaN(differencePercentage) ? 0 : differencePercentage}%</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport Installment from './installment';\r\n\r\nexport default function Installments({ resultsArray }) {\r\n  let id = 0;\r\n  return (\r\n    <ul>\r\n    \r\n      {resultsArray.map(result => {\r\n      id++\r\n      return <li key={id}>\r\n                <Installment result={result}/>\r\n            </li>\r\n      })\r\n      }\r\n\r\n    </ul>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport Installments from '../installments/installments';\r\n\r\nexport default function Form() {\r\n\r\n  const calculator = (currentInstallment) => {\r\n    let total = 0;\r\n    total = initialValue * ((1 + (interestRate / 100)) ** currentInstallment);\r\n    return Number(total.toFixed(2));\r\n  };\r\n\r\n  const [initialValue, setInitialValue] = useState('');\r\n  const [interestRate, setInterestRate] = useState('');\r\n  const [installments, setInstallments] = useState('');\r\n  const [resultsArray, setResultsArray] = useState([{\r\n    installment: 0,\r\n    initialValue: initialValue,\r\n    finalValue: calculator(1),}]);\r\n\r\n  useEffect(() => {\r\n    const calculator = (currentInstallment) => {\r\n      let total = 0;\r\n      total = initialValue * ((1 + (interestRate / 100)) ** currentInstallment);\r\n      return Number(total.toFixed(2));\r\n    };\r\n    \r\n    let currentInstallment = 1;\r\n    let arr = [];\r\n    \r\n    for (let i = 0; i < installments + 1; i++) {\r\n      arr.push({\r\n        installment: currentInstallment,\r\n        initialValue: initialValue,\r\n        finalValue: calculator(currentInstallment),\r\n      });\r\n      currentInstallment++;\r\n    };\r\n\r\n    setResultsArray([...arr]);\r\n  }, [initialValue, interestRate, installments]);\r\n\r\n  const handleInitialValue = (event) => {\r\n    let value = Number(event.target.value);\r\n    value = value <= 0 || isNaN(value) ? '' : value;\r\n    setInitialValue(value);\r\n\r\n  };\r\n  const handleInterestRate = (event) => {\r\n    let value = Number(event.target.value);\r\n    value = value === 0 || isNaN(value) ? '' : value\r\n    setInterestRate(value);\r\n  };\r\n  const handleInstallments = (event) => {\r\n    let value = Number(event.target.value);\r\n    value = value <= 0 || isNaN(value) ? '' : value\r\n    setInstallments(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"initialValue\">\r\n      Initial Amount:\r\n        <input onChange={handleInitialValue} value={initialValue} min=\"0\" type=\"number\" name=\"initialValue\" id=\"initialValue\" />\r\n      </label>\r\n      <label htmlFor=\"interestRate\">\r\n        Interest Rate:\r\n        <input step='0.1' onChange={handleInterestRate} value={interestRate} type=\"number\" name=\"interestRate\" id=\"interestRate\" />\r\n      </label>\r\n      <label htmlFor=\"installments\">\r\n        Installments:\r\n        <input onChange={handleInstallments} value={installments} min=\"0\" type=\"number\" name=\"installments\" id=\"installments\" />\r\n      </label>\r\n      <div>\r\n        <Installments resultsArray={resultsArray} initialValue={initialValue} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport Form from './components/form/form.js';\r\n\r\nexport default function App() {\r\n  return <Form />;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}